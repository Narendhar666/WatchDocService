package com.ub.risk.WatchService;

import static java.nio.file.StandardWatchEventKinds.ENTRY_CREATE;
import static java.nio.file.StandardWatchEventKinds.ENTRY_DELETE;
import static java.nio.file.StandardWatchEventKinds.ENTRY_MODIFY;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.nio.file.WatchEvent;
import java.nio.file.WatchKey;
import java.nio.file.WatchService;

import org.apache.commons.io.FileUtils;

public class Java8WatchServiceExample {

	public static void main(String[] args) throws InterruptedException {
		try {
			WatchService watcher = FileSystems.getDefault().newWatchService();
			Path dir = Paths.get("E:\\watchservice\\source");

			File source = new File("E:\\watchservice\\source");
			File dest = new File("E:\\watchservice\\destination");

			dir.register(watcher, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY);

			System.out.println("Watch Service registered for dir: " + dir.getFileName());

			while (true) {
				WatchKey key;
				try {
					key = watcher.take();
				} catch (InterruptedException ex) {
					return;
				}

				for (WatchEvent<?> event : key.pollEvents()) {
					WatchEvent.Kind<?> kind = event.kind();

					@SuppressWarnings("unchecked")
					WatchEvent<Path> ev = (WatchEvent<Path>) event;
					Path fileName = ev.context();

					

					if (kind == ENTRY_CREATE) {

						try {
							//System.out.println("Processing.....");

							// only copy
							// FileUtils.copyDirectory(source, dest);
							// StandardCopyOption.REPLACE_EXISTING);

							// overright
							System.out.println("##ev.context():"+ev.context());
							Path sourcepath = Paths.get(source.toURI());
							Path destpath = Paths.get(dest.toURI());

							/* Files.copy(sourcepath, destpath,
							 StandardCopyOption.REPLACE_EXISTING);*/

							// Files.move(sourcepath, destpath,
							// StandardCopyOption.REPLACE_EXISTING);
							// ##Files.copy(sourcepath, destpath,
							// StandardCopyOption.REPLACE_EXISTING);
							System.out.println("count :"+ev.count());
							System.out.println(kind.name() + "  ## : " + fileName);
							Thread.sleep(1000);
						//	FileUtils.copyDirectory(source, dest);
							
							
							File sourceFile = new File(sourcepath.toString()+File.separator+fileName.toString());
							File destFile =new File(destpath.toString()+File.separator+fileName.toString());

							FileInputStream fileInputStream = new FileInputStream(sourceFile);
							FileOutputStream fileOutputStream = new FileOutputStream(
									destFile);

							int bufferSize;
							byte[] bufffer = new byte[512];
							while ((bufferSize = fileInputStream.read(bufffer)) > 0) {
							    fileOutputStream.write(bufffer, 0, bufferSize);
							}
							fileInputStream.close();
							fileOutputStream.close();
							
							
							
							
							 /*SeekableByteChannel destFileChannel =
							 Files.newByteChannel(destpath);
							 destFileChannel.close();*/

						} catch (IOException e) {
							System.out.print("error:" + e.getMessage());
						}

					}

					if (kind == ENTRY_MODIFY) {/*
						System.out.println("My source file has changed!!!");
						FileUtils.copyDirectory(source, dest);
						// break;
					*/}
				}

				boolean valid = key.reset();
				if (!valid) {
					break;
				}
			}

		} catch (IOException ex) {
			System.err.println(ex);
		}
	}
}
